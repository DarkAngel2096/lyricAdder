{"version":3,"sources":["../../src/utils/fetch-helper.js"],"names":["parseResponse","response","json","then","ok","error","Error","url","statusText","endpoint","method","clientId","token","otherProps","Promise","reject","headers","Authorization","options","Accept"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;AAEO,IAAMA,wCAAgB,SAAhBA,aAAgB;AAAA,SAC3BC,SAASC,IAAT,GAAgBC,IAAhB,CAAqB,gBAAQ;AAC3B,QAAI,CAACF,SAASG,EAAd,EAAkB;AAChB,UAAMC,QAAQ,IAAIC,KAAJ,CAAaL,SAASM,GAAtB,SAA6BN,SAASO,UAAtC,CAAd;AACAH,YAAMJ,QAAN,GAAiBC,IAAjB;AACA,YAAMG,KAAN;AACD;;AAED,WAAOH,IAAP;AACD,GARD,CAD2B;AAAA,CAAtB;;kBAWQ,YAMJ;AAAA,iFAAP,EAAO;;AAAA,MALTO,QAKS,QALTA,QAKS;AAAA,yBAJTC,MAIS;AAAA,MAJTA,MAIS,+BAJA,KAIA;AAAA,MAHTC,QAGS,QAHTA,QAGS;AAAA,MAFTC,KAES,QAFTA,KAES;AAAA,MADNC,UACM;;AACT,MAAI,CAACJ,QAAL,EAAe;AACb,WAAOK,QAAQC,MAAR,CAAe,IAAIT,KAAJ,CAAU,0BAAV,CAAf,CAAP;AACD;;AAED,MAAI,CAACK,QAAD,IAAa,CAACC,KAAlB,EAAyB;AACvB,WAAOE,QAAQC,MAAR,CAAe,IAAIT,KAAJ,CAAU,mCAAV,CAAf,CAAP;AACD;;AAED;AACA,MAAMU,UAAUJ,QACZ,EAAEK,0BAAwBL,KAA1B,EADY,GAEZ,EAAE,aAAaD,QAAf,EAFJ;;AAIA;AACA,MAAMO,qCACDL,UADC;AAEJH,kBAFI;AAGJM,wCACKA,OADL;AAEEG,cAAQ;AAFV;AAHI,IAAN;;AASA,SAAO,yBAAQV,QAAR,EAAkBS,OAAlB,EAA2Bf,IAA3B,CAAgCH,aAAhC,CAAP;AACD,C","file":"fetch-helper.js","sourcesContent":["import fetchFn from 'node-fetch';\n\nexport const parseResponse = response =>\n  response.json().then(json => {\n    if (!response.ok) {\n      const error = new Error(`${response.url} ${response.statusText}`);\n      error.response = json;\n      throw error;\n    }\n\n    return json;\n  });\n\nexport default ({\n  endpoint,\n  method = 'GET',\n  clientId,\n  token,\n  ...otherProps\n} = {}) => {\n  if (!endpoint) {\n    return Promise.reject(new Error('An endpoint is required.'));\n  }\n\n  if (!clientId && !token) {\n    return Promise.reject(new Error('A client ID or token is required.'));\n  }\n\n  // Construct headers object.\n  const headers = token\n    ? { Authorization: `OAuth ${token}` }\n    : { 'Client-ID': clientId };\n\n  // Construct options object.\n  const options = {\n    ...otherProps,\n    method,\n    headers: {\n      ...headers,\n      Accept: 'application/vnd.twitchtv.v5+json',\n    },\n  };\n\n  return fetchFn(endpoint, options).then(parseResponse);\n};\n"]}