{"version":3,"sources":["../src/client.js"],"names":["api","require","commands","eventEmitter","EventEmitter","logger","parse","timer","ws","global","WebSocket","MozWebSocket","_","client","opts","setMaxListeners","get","channels","connection","identity","options","clientId","maxReconnectAttempts","Infinity","maxReconnectInterval","reconnect","reconnectDecay","reconnectInterval","reconnecting","reconnections","reconnectTimer","secure","emotes","emotesets","currentLatency","globaluserstate","lastJoined","latency","Date","moderators","pingLoop","pingTimeout","reason","username","userstate","wasCloseCalled","level","debug","log","setLevel","e","forEach","part","index","theArray","channel","call","inherits","prototype","Object","keys","methodName","handleMessage","message","isNull","params","msg","msgid","tags","badges","key","isBoolean","prefix","command","emit","readyState","send","currDate","getTime","emits","clearTimeout","warn","JSON","stringify","info","server","port","setInterval","setTimeout","error","close","clearInterval","timeout","joinQueue","queue","joinChannels","union","i","self","add","chan","bind","length","run","splitted","split","mods","replace","toString","toLowerCase","splice","remainingHost","Number","isNaN","charAt","includes","login","plan","planName","replaceAll","months","prime","recipient","raider","viewers","parseInt","type","duration","Math","round","disconnect","connect","indexOf","push","isJustinfan","getUsername","_updateEmoteset","hasOwnProperty","slow","minutes","filter","value","isSelf","from","count","extractNumber","match","Promise","resolve","reject","_openConnection","once","err","onmessage","_onMessage","onerror","_onError","onclose","_onClose","onopen","_onOpen","justinfan","password","event","parts","data","str","_getPromiseDelay","commandTimeout","_sendCommand","delay","fn","promiseDelay","then","_sendMessage","splitLine","id","isRegex","emote","code","emoteRegex","emoteString","merge","transformEmotes","sets","url","headers","Authorization","res","body","emoticon_sets","getOptions","getChannels","isMod","utils","levenshtein","s1","s2","caseSensitive","cost_ins","cost_rep","cost_del","l1","l2","p1","Array","p2","i1","i2","c0","c1","c2","tmp","raffle","init","raffleChannels","enter","leave","pick","floor","random","reset","isParticipating","symbols","line","charCode","substring","charCodeAt","ceil","uppercase","chars","u_let","module","exports","window","tmi"],"mappings":"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","file":"client.js","sourcesContent":["const api = require('./api');\nconst commands = require('./commands');\nconst eventEmitter = require('./events').EventEmitter;\nconst logger = require('./logger');\nconst parse = require('./parser');\nconst timer = require('./timer');\nconst ws = global.WebSocket || global.MozWebSocket || require('ws');\nconst _ = require('./utils');\n\n// Client instance..\nconst client = function client(opts) {\n  if (this instanceof client === false) {\n    return new client(opts);\n  }\n  this.setMaxListeners(0);\n\n  this.opts = _.get(opts, {});\n  this.opts.channels = this.opts.channels || [];\n  this.opts.connection = this.opts.connection || {};\n  this.opts.identity = this.opts.identity || {};\n  this.opts.options = this.opts.options || {};\n\n  this.clientId = _.get(this.opts.options.clientId, null);\n\n  this.maxReconnectAttempts = _.get(\n    this.opts.connection.maxReconnectAttempts,\n    Infinity,\n  );\n  this.maxReconnectInterval = _.get(\n    this.opts.connection.maxReconnectInterval,\n    30000,\n  );\n  this.reconnect = _.get(this.opts.connection.reconnect, false);\n  this.reconnectDecay = _.get(this.opts.connection.reconnectDecay, 1.5);\n  this.reconnectInterval = _.get(this.opts.connection.reconnectInterval, 1000);\n\n  this.reconnecting = false;\n  this.reconnections = 0;\n  this.reconnectTimer = this.reconnectInterval;\n\n  this.secure = _.get(this.opts.connection.secure, false);\n\n  // Raw data and object for emote-sets..\n  this.emotes = '';\n  this.emotesets = {};\n\n  this.channels = [];\n  this.currentLatency = 0;\n  this.globaluserstate = {};\n  this.lastJoined = '';\n  this.latency = new Date();\n  this.moderators = {};\n  this.pingLoop = null;\n  this.pingTimeout = null;\n  this.reason = '';\n  this.username = '';\n  this.userstate = {};\n  this.wasCloseCalled = false;\n  this.ws = null;\n\n  // Create the logger..\n  let level = 'error';\n  if (this.opts.options.debug) {\n    level = 'info';\n  }\n  this.log = this.opts.logger || logger;\n\n  try {\n    logger.setLevel(level);\n  } catch (e) {\n    // swallow error\n  }\n\n  // Format the channel names..\n  this.opts.channels.forEach((part, index, theArray) => {\n    theArray[index] = _.channel(part);\n  });\n\n  eventEmitter.call(this);\n};\n\n_.inherits(client, eventEmitter);\n\nclient.prototype.api = api;\n\n// Put all commands in prototype..\nObject.keys(commands).forEach(methodName => {\n  client.prototype[methodName] = commands[methodName];\n});\n\n// Handle parsed chat server message..\nclient.prototype.handleMessage = function handleMessage(message) {\n  if (!_.isNull(message)) {\n    const channel = _.channel(_.get(message.params[0], null));\n    const msg = _.get(message.params[1], null);\n    const msgid = _.get(message.tags['msg-id'], null);\n\n    // Parse badges and emotes..\n    message.tags = parse.badges(parse.emotes(message.tags));\n\n    // Transform IRCv3 tags..\n    if (message.tags) {\n      Object.keys(message.tags).forEach(key => {\n        if (key !== 'emote-sets' && key !== 'ban-duration' && key !== 'bits') {\n          if (_.isBoolean(message.tags[key])) {\n            message.tags[key] = null;\n          } else if (message.tags[key] === '1') {\n            message.tags[key] = true;\n          } else if (message.tags[key] === '0') {\n            message.tags[key] = false;\n          }\n        }\n      });\n    }\n\n    // Messages with no prefix..\n    if (_.isNull(message.prefix)) {\n      switch (message.command) {\n        // Received PING from server..\n        case 'PING':\n          this.emit('ping');\n          if (\n            !_.isNull(this.ws) &&\n            this.ws.readyState !== 2 &&\n            this.ws.readyState !== 3\n          ) {\n            this.ws.send('PONG');\n          }\n          break;\n\n        // Received PONG from server, return current latency..\n        case 'PONG': {\n          const currDate = new Date();\n          this.currentLatency =\n            currDate.getTime() - this.latency.getTime();\n          this.emits(\n            ['pong', '_promisePing'],\n            [[this.currentLatency], [this.currentLatency]],\n          );\n\n          clearTimeout(this.pingTimeout);\n          break;\n        }\n\n        default:\n          this.log.warn(\n            `Could not parse message with no prefix:\\n${JSON.stringify(\n              message,\n              null,\n              4,\n            )}`,\n          );\n          break;\n      }\n    } else if (message.prefix === 'tmi.twitch.tv') {\n      // Messages with \"tmi.twitch.tv\" as a prefix..\n      switch (message.command) {\n        case '002':\n        case '003':\n        case '004':\n        case '375':\n        case '376':\n        case 'CAP':\n          break;\n\n        // Retrieve username from server..\n        case '001':\n          this.username = message.params[0];\n          break;\n\n        // Connected to server..\n        case '372': {\n          this.log.info('Connected to server.');\n          this.userstate['#tmijs'] = {};\n          this.emits(\n            ['connected', '_promiseConnect'],\n            [[this.server, this.port], [null]],\n          );\n          this.reconnections = 0;\n          this.reconnectTimer = this.reconnectInterval;\n\n          // Set an internal ping timeout check interval..\n          this.pingLoop = setInterval(() => {\n            // Make sure the connection is opened before sending the message..\n            if (\n              !_.isNull(this.ws) &&\n              this.ws.readyState !== 2 &&\n              this.ws.readyState !== 3\n            ) {\n              this.ws.send('PING');\n            }\n            this.latency = new Date();\n            this.pingTimeout = setTimeout(() => {\n              if (!_.isNull(this.ws)) {\n                this.wasCloseCalled = false;\n                this.log.error('Ping timeout.');\n                this.ws.close();\n\n                clearInterval(this.pingLoop);\n                clearTimeout(this.pingTimeout);\n              }\n            }, _.get(this.opts.connection.timeout, 9999));\n          }, 60000);\n\n          // Join all the channels from configuration with a 2 seconds interval..\n          const joinQueue = new timer.queue(2000);\n          const joinChannels = _.union(this.opts.channels, this.channels);\n          this.channels = [];\n\n          for (let i = 0; i < joinChannels.length; i++) {\n            const self = this;\n            joinQueue.add(\n              (chan => {\n                if (\n                  !_.isNull(self.ws) &&\n                  self.ws.readyState !== 2 &&\n                  self.ws.readyState !== 3\n                ) {\n                  self.ws.send(`JOIN ${_.channel(joinChannels[chan])}`);\n                }\n              }).bind(this, i),\n            );\n          }\n\n          joinQueue.run();\n          break;\n        }\n\n        // https://github.com/justintv/Twitch-API/blob/master/chat/capabilities.md#notice\n        case 'NOTICE':\n          switch (msgid) {\n            // This room is now in subscribers-only mode.\n            case 'subs_on':\n              this.log.info(\n                `[${channel}] This room is now in subscribers-only mode.`,\n              );\n              this.emits(\n                ['subscriber', 'subscribers', '_promiseSubscribers'],\n                [[channel, true], [channel, true], [null]],\n              );\n              break;\n\n            // This room is no longer in subscribers-only mode.\n            case 'subs_off':\n              this.log.info(\n                `[${channel}] This room is no longer in subscribers-only mode.`,\n              );\n              this.emits(\n                ['subscriber', 'subscribers', '_promiseSubscribersoff'],\n                [[channel, false], [channel, false], [null]],\n              );\n              break;\n\n            // This room is now in emote-only mode.\n            case 'emote_only_on':\n              this.log.info(\n                `[${channel}] This room is now in emote-only mode.`,\n              );\n              this.emits(\n                ['emoteonly', '_promiseEmoteonly'],\n                [[channel, true], [null]],\n              );\n              break;\n\n            // This room is no longer in emote-only mode.\n            case 'emote_only_off':\n              this.log.info(\n                `[${channel}] This room is no longer in emote-only mode.`,\n              );\n              this.emits(\n                ['emoteonly', '_promiseEmoteonlyoff'],\n                [[channel, false], [null]],\n              );\n              break;\n\n            // Do not handle slow_on/off here, listen to the ROOMSTATE notice\n            // instead as it returns the delay.\n            case 'slow_on':\n            case 'slow_off':\n              break;\n\n            // Do not handle followers_on/off here, listen to the ROOMSTATE\n            // notice instead as it returns the delay.\n            case 'followers_on_zero':\n            case 'followers_on':\n            case 'followers_off':\n              break;\n\n            // This room is now in r9k mode.\n            case 'r9k_on':\n              this.log.info(`[${channel}] This room is now in r9k mode.`);\n              this.emits(\n                ['r9kmode', 'r9kbeta', '_promiseR9kbeta'],\n                [[channel, true], [channel, true], [null]],\n              );\n              break;\n\n            // This room is no longer in r9k mode.\n            case 'r9k_off':\n              this.log.info(`[${channel}] This room is no longer in r9k mode.`);\n              this.emits(\n                ['r9kmode', 'r9kbeta', '_promiseR9kbetaoff'],\n                [[channel, false], [channel, false], [null]],\n              );\n              break;\n\n            // The moderators of this room are [...]\n            case 'room_mods': {\n              const splitted = msg.split(':');\n              const mods = splitted[1]\n                .replace(/,/g, '')\n                .split(':')\n                .toString()\n                .toLowerCase()\n                .split(' ');\n\n              for (let i = mods.length - 1; i >= 0; i--) {\n                if (mods[i] === '') {\n                  mods.splice(i, 1);\n                }\n              }\n\n              this.emits(\n                ['_promiseMods', 'mods'],\n                [[null, mods], [channel, mods]],\n              );\n              break;\n            }\n\n            // There are no moderators for this room.\n            case 'no_mods':\n              this.emit('_promiseMods', null, []);\n              break;\n\n            // Channel is suspended..\n            case 'msg_channel_suspended':\n              this.emits(\n                ['notice', '_promiseJoin'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Ban command failed..\n            case 'already_banned':\n            case 'bad_ban_admin':\n            case 'bad_ban_broadcaster':\n            case 'bad_ban_global_mod':\n            case 'bad_ban_self':\n            case 'bad_ban_staff':\n            case 'usage_ban':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseBan'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Ban command success..\n            case 'ban_success':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseBan'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Clear command failed..\n            case 'usage_clear':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseClear'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Mods command failed..\n            case 'usage_mods':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseMods'],\n                [[channel, msgid, msg], [msgid, []]],\n              );\n              break;\n\n            // Mod command success..\n            case 'mod_success':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseMod'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Mod command failed..\n            case 'usage_mod':\n            case 'bad_mod_banned':\n            case 'bad_mod_mod':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseMod'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Unmod command success..\n            case 'unmod_success':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseUnmod'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Unmod command failed..\n            case 'usage_unmod':\n            case 'bad_unmod_mod':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseUnmod'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Color command success..\n            case 'color_changed':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseColor'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Color command failed..\n            case 'usage_color':\n            case 'turbo_only_color':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseColor'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Commercial command success..\n            case 'commercial_success':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseCommercial'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Commercial command failed..\n            case 'usage_commercial':\n            case 'bad_commercial_error':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseCommercial'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Host command success..\n            case 'hosts_remaining': {\n              this.log.info(`[${channel}] ${msg}`);\n              const remainingHost = !Number.isNaN(msg.charAt(0))\n                ? msg.charAt(0)\n                : 0;\n              this.emits(\n                ['notice', '_promiseHost'],\n                [[channel, msgid, msg], [null, ~~remainingHost]],\n              );\n              break;\n            }\n\n            // Host command failed..\n            case 'bad_host_hosting':\n            case 'bad_host_rate_exceeded':\n            case 'bad_host_error':\n            case 'usage_host':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseHost'],\n                [[channel, msgid, msg], [msgid, null]],\n              );\n              break;\n\n            // r9kbeta command failed..\n            case 'already_r9k_on':\n            case 'usage_r9k_on':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseR9kbeta'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // r9kbetaoff command failed..\n            case 'already_r9k_off':\n            case 'usage_r9k_off':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseR9kbetaoff'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Timeout command success..\n            case 'timeout_success':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseTimeout'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Subscribersoff command failed..\n            case 'already_subs_off':\n            case 'usage_subs_off':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseSubscribersoff'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Subscribers command failed..\n            case 'already_subs_on':\n            case 'usage_subs_on':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseSubscribers'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Emoteonlyoff command failed..\n            case 'already_emote_only_off':\n            case 'usage_emote_only_off':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseEmoteonlyoff'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Emoteonly command failed..\n            case 'already_emote_only_on':\n            case 'usage_emote_only_on':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseEmoteonly'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Slow command failed..\n            case 'usage_slow_on':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseSlow'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Slowoff command failed..\n            case 'usage_slow_off':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseSlowoff'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Timeout command failed..\n            case 'usage_timeout':\n            case 'bad_timeout_admin':\n            case 'bad_timeout_broadcaster':\n            case 'bad_timeout_duration':\n            case 'bad_timeout_global_mod':\n            case 'bad_timeout_self':\n            case 'bad_timeout_staff':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseTimeout'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Unban command success..\n            // Unban can also be used to cancel an active timeout.\n            case 'untimeout_success':\n            case 'unban_success':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseUnban'],\n                [[channel, msgid, msg], [null]],\n              );\n              break;\n\n            // Unban command failed..\n            case 'usage_unban':\n            case 'bad_unban_no_ban':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseUnban'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Unhost command failed..\n            case 'usage_unhost':\n            case 'not_hosting':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseUnhost'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Whisper command failed..\n            case 'whisper_invalid_login':\n            case 'whisper_invalid_self':\n            case 'whisper_limit_per_min':\n            case 'whisper_limit_per_sec':\n            case 'whisper_restricted_recipient':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                ['notice', '_promiseWhisper'],\n                [[channel, msgid, msg], [msgid]],\n              );\n              break;\n\n            // Permission error..\n            case 'no_permission':\n            case 'msg_banned':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emits(\n                [\n                  'notice',\n                  '_promiseBan',\n                  '_promiseClear',\n                  '_promiseUnban',\n                  '_promiseTimeout',\n                  '_promiseMods',\n                  '_promiseMod',\n                  '_promiseUnmod',\n                  '_promiseCommercial',\n                  '_promiseHost',\n                  '_promiseUnhost',\n                  '_promiseR9kbeta',\n                  '_promiseR9kbetaoff',\n                  '_promiseSlow',\n                  '_promiseSlowoff',\n                  '_promiseFollowers',\n                  '_promiseFollowersoff',\n                  '_promiseSubscribers',\n                  '_promiseSubscribersoff',\n                  '_promiseEmoteonly',\n                  '_promiseEmoteonlyoff',\n                ],\n                [\n                  [channel, msgid, msg],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                  [msgid],\n                ],\n              );\n              break;\n\n            // Unrecognized command..\n            case 'unrecognized_cmd':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emit('notice', channel, msgid, msg);\n\n              if (msg.split(' ').splice(-1)[0] === '/w') {\n                this.log.warn(\n                  'You must be connected to a group server to send or receive whispers.',\n                );\n              }\n              break;\n\n            // Send the following msg-ids to the notice event listener..\n            case 'cmds_available':\n            case 'host_target_went_offline':\n            case 'msg_censored_broadcaster':\n            case 'msg_duplicate':\n            case 'msg_emoteonly':\n            case 'msg_followersonly':\n            case 'msg_verified_email':\n            case 'msg_ratelimit':\n            case 'msg_subsonly':\n            case 'msg_timedout':\n            case 'no_help':\n            case 'raid_notice_restricted_chat':\n            case 'unraid_error_no_active_raid':\n            case 'usage_disconnect':\n            case 'usage_help':\n            case 'usage_me':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emit('notice', channel, msgid, msg);\n              break;\n\n            // Ignore this because we are already listening to HOSTTARGET..\n            case 'host_on':\n            case 'host_off':\n              //\n              break;\n\n            case 'msg_rejected':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emit('automodinreview', { channel });\n              break;\n            case 'msg_rejected_mandatory':\n              this.log.info(`[${channel}] ${msg}`);\n              this.emit('automodrejected', { channel });\n              break;\n\n            default:\n              if (\n                msg.includes('Login unsuccessful') ||\n                msg.includes('Login authentication failed')\n              ) {\n                this.wasCloseCalled = false;\n                this.reconnect = false;\n                this.reason = msg;\n                this.log.error(this.reason);\n                this.ws.close();\n              } else if (\n                msg.includes('Error logging in') ||\n                msg.includes('Improperly formatted auth')\n              ) {\n                this.wasCloseCalled = false;\n                this.reconnect = false;\n                this.reason = msg;\n                this.log.error(this.reason);\n                this.ws.close();\n              } else if (msg.includes('Invalid NICK')) {\n                this.wasCloseCalled = false;\n                this.reconnect = false;\n                this.reason = 'Invalid NICK.';\n                this.log.error(this.reason);\n                this.ws.close();\n              } else {\n                this.log.warn(\n                  `Could not parse NOTICE from tmi.twitch.tv:\\n${JSON.stringify(\n                    message,\n                    null,\n                    4,\n                  )}`,\n                );\n              }\n              break;\n          }\n          break;\n\n        // Handle subanniversary / resub..\n        case 'USERNOTICE': {\n          if (msgid === 'resub') {\n            const username = message.tags['display-name'] || message.tags.login;\n            const plan = message.tags['msg-param-sub-plan'];\n            const planName = _.replaceAll(\n              _.get(message.tags['msg-param-sub-plan-name'], null),\n              {\n                '\\\\\\\\s': ' ',\n                '\\\\\\\\:': ';',\n                '\\\\\\\\\\\\\\\\': '\\\\',\n                '\\\\r': '\\r',\n                '\\\\n': '\\n',\n              },\n            );\n            const months = _.get(~~message.tags['msg-param-months'], null);\n            const prime = plan.includes('Prime');\n            const userstate = message.tags;\n\n            if (userstate) {\n              userstate['message-type'] = 'resub';\n            }\n\n            this.emits(\n              ['resub', 'subanniversary'],\n              [\n                [\n                  channel,\n                  username,\n                  months,\n                  msg,\n                  userstate,\n                  { prime, plan, planName },\n                ],\n                [\n                  channel,\n                  username,\n                  months,\n                  msg,\n                  userstate,\n                  { prime, plan, planName },\n                ],\n              ],\n            );\n          } else if (msgid === 'sub') {\n            // Handle sub\n            const username = message.tags['display-name'] || message.tags.login;\n            const plan = message.tags['msg-param-sub-plan'];\n            const planName = _.replaceAll(\n              _.get(message.tags['msg-param-sub-plan-name'], null),\n              {\n                '\\\\\\\\s': ' ',\n                '\\\\\\\\:': ';',\n                '\\\\\\\\\\\\\\\\': '\\\\',\n                '\\\\r': '\\r',\n                '\\\\n': '\\n',\n              },\n            );\n            const prime = plan.includes('Prime');\n            const userstate = message.tags;\n\n            if (userstate) {\n              userstate['message-type'] = 'sub';\n            }\n\n            this.emit(\n              'subscription',\n              channel,\n              username,\n              { prime, plan, planName },\n              msg,\n              userstate,\n            );\n          } else if (msgid === 'subgift') {\n            const username = message.tags['display-name'] || message.tags.login;\n            const recipient =\n              message.tags['msg-param-recipient-display-name'] ||\n              message.tags['msg-param-recipient-user-name'];\n            const plan = message.tags['msg-param-sub-plan'];\n            const planName = _.replaceAll(\n              _.get(message.tags['msg-param-sub-plan-name'], null),\n              {\n                '\\\\\\\\s': ' ',\n                '\\\\\\\\:': ';',\n                '\\\\\\\\\\\\\\\\': '\\\\',\n                '\\\\r': '\\r',\n                '\\\\n': '\\n',\n              },\n            );\n            const userstate = message.tags;\n\n            if (userstate) {\n              userstate['message-type'] = 'subgift';\n            }\n\n            this.emit(\n              'subgift',\n              channel,\n              username,\n              recipient,\n              { plan, planName },\n              userstate,\n            );\n          } else if (msgid === 'raid') {\n            const raider =\n              message.tags['msg-param-displayName'] ||\n              message.tags['msg-param-login'];\n            const viewers = parseInt(message.tags['msg-param-viewerCount'], 10);\n            const userstate = message.tags;\n\n            if (userstate) {\n              userstate['message-type'] = 'raid';\n            }\n\n            this.emit('raid', { channel, raider, viewers, userstate });\n          } else if (msgid === 'ritual') {\n            const username = message.tags['display-name'] || message.tags.login;\n            const type = message.tags['msg-param-ritual-name'];\n            const userstate = message.tags;\n\n            if (userstate) {\n              userstate['message-type'] = 'ritual';\n            }\n\n            this.emit('ritual', { channel, username, type, userstate });\n          }\n          break;\n        }\n\n        // Channel is now hosting another channel or exited host mode..\n        case 'HOSTTARGET':\n          // Stopped hosting..\n          if (msg.split(' ')[0] === '-') {\n            this.log.info(`[${channel}] Exited host mode.`);\n            this.emits(\n              ['unhost', '_promiseUnhost'],\n              [[channel, ~~msg.split(' ')[1] || 0], [null]],\n            );\n          } else {\n            // Now hosting..\n            const viewers = ~~msg.split(' ')[1] || 0;\n\n            this.log.info(\n              `[${channel}] Now hosting ${\n                msg.split(' ')[0]\n              } for ${viewers} viewer(s).`,\n            );\n            this.emit('hosting', channel, msg.split(' ')[0], viewers);\n          }\n          break;\n\n        // Someone has been timed out or chat has been cleared by a moderator..\n        case 'CLEARCHAT':\n          // User has been banned / timed out by a moderator..\n          if (message.params.length > 1) {\n            // Duration returns null if it's a ban, otherwise it's a timeout..\n            const duration = _.get(message.tags['ban-duration'], null);\n\n            // Escaping values: http://ircv3.net/specs/core/message-tags-3.2.html#escaping-values\n            const reason = _.replaceAll(\n              _.get(message.tags['ban-reason'], null),\n              {\n                '\\\\\\\\s': ' ',\n                '\\\\\\\\:': ';',\n                '\\\\\\\\\\\\\\\\': '\\\\',\n                '\\\\r': '\\r',\n                '\\\\n': '\\n',\n              },\n            );\n\n            if (_.isNull(duration)) {\n              this.log.info(\n                `[${channel}] ${msg} has been banned. Reason: ${reason ||\n                  'n/a'}`,\n              );\n              this.emit('ban', channel, msg, reason);\n            } else {\n              this.log.info(\n                `[${channel}] ${msg} has been timed out for ${duration} seconds. Reason: ${reason ||\n                  'n/a'}`,\n              );\n              this.emit('timeout', channel, msg, reason, ~~duration);\n            }\n          } else {\n            // Chat was cleared by a moderator..\n            this.log.info(`[${channel}] Chat was cleared by a moderator.`);\n            this.emits(['clearchat', '_promiseClear'], [[channel], [null]]);\n          }\n          break;\n\n        // Received a reconnection request from the server..\n        case 'RECONNECT':\n          this.log.info('Received RECONNECT request from Twitch..');\n          this.log.info(\n            `Disconnecting and reconnecting in ${Math.round(\n              this.reconnectTimer / 1000,\n            )} seconds..`,\n          );\n          this.disconnect();\n          setTimeout(() => {\n            this.connect();\n          }, this.reconnectTimer);\n          break;\n\n        // Wrong cluster..\n        case 'SERVERCHANGE':\n          //\n          break;\n\n        // Received when joining a channel and every time you send a PRIVMSG to a channel.\n        case 'USERSTATE':\n          message.tags.username = this.username;\n\n          // Add the client to the moderators of this room..\n          if (message.tags['user-type'] === 'mod') {\n            if (!this.moderators[this.lastJoined]) {\n              this.moderators[this.lastJoined] = [];\n            }\n            if (this.moderators[this.lastJoined].indexOf(this.username) < 0) {\n              this.moderators[this.lastJoined].push(this.username);\n            }\n          }\n\n          // Logged in and username doesn't start with justinfan..\n          if (!_.isJustinfan(this.getUsername()) && !this.userstate[channel]) {\n            this.userstate[channel] = message.tags;\n            this.lastJoined = channel;\n            this.channels.push(channel);\n            this.log.info(`Joined ${channel}`);\n            this.emit('join', channel, _.username(this.getUsername()), true);\n          }\n\n          // Emote-sets has changed, update it..\n          if (message.tags['emote-sets'] !== this.emotes) {\n            this._updateEmoteset(message.tags['emote-sets']);\n          }\n\n          this.userstate[channel] = message.tags;\n          break;\n\n        // Describe non-channel-specific state informations..\n        case 'GLOBALUSERSTATE':\n          this.globaluserstate = message.tags;\n\n          // Received emote-sets..\n          if (typeof message.tags['emote-sets'] !== 'undefined') {\n            this._updateEmoteset(message.tags['emote-sets']);\n          }\n          break;\n\n        // Received when joining a channel and every time one of the chat\n        // room settings, like slow mode, change.\n        // The message on join contains all room settings.\n        case 'ROOMSTATE':\n          // We use this notice to know if we successfully joined a channel..\n          if (_.channel(this.lastJoined) === _.channel(message.params[0])) {\n            this.emit('_promiseJoin', null);\n          }\n\n          // Provide the channel name in the tags before emitting it..\n          message.tags.channel = _.channel(message.params[0]);\n          this.emit('roomstate', _.channel(message.params[0]), message.tags);\n\n          // Handle slow mode here instead of the slow_on/off notice..\n          // This room is now in slow mode. You may send messages every slow_duration seconds.\n          if (\n            message.tags.hasOwnProperty('slow') &&\n            !message.tags.hasOwnProperty('subs-only')\n          ) {\n            if (typeof message.tags.slow === 'boolean') {\n              this.log.info(\n                `[${channel}] This room is no longer in slow mode.`,\n              );\n              this.emits(\n                ['slow', 'slowmode', '_promiseSlowoff'],\n                [[channel, false, 0], [channel, false, 0], [null]],\n              );\n            } else {\n              this.log.info(`[${channel}] This room is now in slow mode.`);\n              this.emits(\n                ['slow', 'slowmode', '_promiseSlow'],\n                [\n                  [channel, true, ~~message.tags.slow],\n                  [channel, true, ~~message.tags.slow],\n                  [null],\n                ],\n              );\n            }\n          }\n\n          // Handle followers only mode here instead of the followers_on/off notice..\n          // This room is now in follower-only mode.\n          // This room is now in <duration> followers-only mode.\n          // This room is no longer in followers-only mode.\n          // duration is in minutes (string)\n          // -1 when /followersoff (string)\n          // false when /followers with no duration (boolean)\n          if (\n            message.tags.hasOwnProperty('followers-only') &&\n            !message.tags.hasOwnProperty('subs-only')\n          ) {\n            if (message.tags['followers-only'] === '-1') {\n              this.log.info(\n                `[${channel}] This room is no longer in followers-only mode.`,\n              );\n              this.emits(\n                ['followersonly', 'followersmode', '_promiseFollowersoff'],\n                [[channel, false, 0], [channel, false, 0], [null]],\n              );\n            } else {\n              const minutes = ~~message.tags['followers-only'];\n              this.log.info(\n                `[${channel}] This room is now in follower-only mode.`,\n              );\n              this.emits(\n                ['followersonly', 'followersmode', '_promiseFollowers'],\n                [[channel, true, minutes], [channel, true, minutes], [null]],\n              );\n            }\n          }\n          break;\n\n        default:\n          this.log.warn(\n            `Could not parse message from tmi.twitch.tv:\\n${JSON.stringify(\n              message,\n              null,\n              4,\n            )}`,\n          );\n          break;\n      }\n    } else if (message.prefix === 'jtv') {\n      // Messages from jtv..\n      switch (message.command) {\n        case 'MODE':\n          if (msg === '+o') {\n            // Add username to the moderators..\n            if (!this.moderators[channel]) {\n              this.moderators[channel] = [];\n            }\n            if (this.moderators[channel].indexOf(message.params[2]) < 0) {\n              this.moderators[channel].push(message.params[2]);\n            }\n\n            this.emit('mod', channel, message.params[2]);\n          } else if (msg === '-o') {\n            // Remove username from the moderators..\n            if (!this.moderators[channel]) {\n              this.moderators[channel] = [];\n            }\n            this.moderators[channel].filter(\n              value => value !== message.params[2],\n            );\n\n            this.emit('unmod', channel, message.params[2]);\n          }\n          break;\n\n        default:\n          this.log.warn(\n            `Could not parse message from jtv:\\n${JSON.stringify(\n              message,\n              null,\n              4,\n            )}`,\n          );\n          break;\n      }\n    } else {\n      // Anything else..\n      switch (message.command) {\n        case '353':\n          this.emit('names', message.params[2], message.params[3].split(' '));\n          break;\n\n        case '366':\n          break;\n\n        // Someone has joined the channel..\n        case 'JOIN':\n          // Joined a channel as a justinfan (anonymous) user..\n          if (\n            _.isJustinfan(this.getUsername()) &&\n            this.username === message.prefix.split('!')[0]\n          ) {\n            this.lastJoined = channel;\n            this.channels.push(channel);\n            this.log.info(`Joined ${channel}`);\n            this.emit('join', channel, message.prefix.split('!')[0], true);\n          }\n\n          // Someone else joined the channel, just emit the join event..\n          if (this.username !== message.prefix.split('!')[0]) {\n            this.emit('join', channel, message.prefix.split('!')[0], false);\n          }\n          break;\n\n        // Someone has left the channel..\n        case 'PART': {\n          let isSelf = false;\n          let index;\n          // Client a channel..\n          if (this.username === message.prefix.split('!')[0]) {\n            isSelf = true;\n            if (this.userstate[channel]) {\n              delete this.userstate[channel];\n            }\n\n            index = this.channels.indexOf(channel);\n            if (index !== -1) {\n              this.channels.splice(index, 1);\n            }\n\n            index = this.opts.channels.indexOf(channel);\n            if (index !== -1) {\n              this.opts.channels.splice(index, 1);\n            }\n\n            this.log.info(`Left ${channel}`);\n            this.emit('_promisePart', null);\n          }\n\n          // Client or someone else left the channel, emit the part event..\n          this.emit('part', channel, message.prefix.split('!')[0], isSelf);\n          break;\n        }\n\n        // Received a whisper..\n        case 'WHISPER': {\n          this.log.info(`[WHISPER] <${message.prefix.split('!')[0]}>: ${msg}`);\n\n          // Update the tags to provide the username..\n          if (!message.tags.hasOwnProperty('username')) {\n            message.tags.username = message.prefix.split('!')[0];\n          }\n          message.tags['message-type'] = 'whisper';\n\n          const from = _.channel(message.tags.username);\n          // Emit for both, whisper and message..\n          this.emits(\n            ['whisper', 'message'],\n            [\n              [from, message.tags, msg, false],\n              [from, message.tags, msg, false],\n            ],\n          );\n          break;\n        }\n\n        case 'PRIVMSG':\n          // Add username (lowercase) to the tags..\n          message.tags.username = message.prefix.split('!')[0];\n\n          // Message from JTV..\n          if (message.tags.username === 'jtv') {\n            // Someone is hosting the channel and the message contains how many viewers..\n            if (msg.includes('hosting you for')) {\n              const count = _.extractNumber(msg);\n\n              this.emit(\n                'hosted',\n                channel,\n                _.username(msg.split(' ')[0]),\n                count,\n                msg.includes('auto'),\n              );\n            } else if (msg.includes('hosting you')) {\n              // Some is hosting the channel, but no viewer(s) count provided in\n              // the message..\n              this.emit(\n                'hosted',\n                channel,\n                _.username(msg.split(' ')[0]),\n                0,\n                msg.includes('auto'),\n              );\n            }\n          } else {\n            // Message is an action (/me <message>)..\n            if (msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)) {\n              message.tags['message-type'] = 'action';\n              this.log.info(\n                `[${channel}] *<${message.tags.username}>: ${\n                  msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1]\n                }`,\n              );\n              this.emits(\n                ['action', 'message'],\n                [\n                  [\n                    channel,\n                    message.tags,\n                    msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1],\n                    false,\n                  ],\n                  [\n                    channel,\n                    message.tags,\n                    msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1],\n                    false,\n                  ],\n                ],\n              );\n            } else if (message.tags.hasOwnProperty('bits')) {\n              this.emit('cheer', channel, message.tags, msg);\n            } else {\n              // Message is a regular chat message..\n              message.tags['message-type'] = 'chat';\n              this.log.info(`[${channel}] <${message.tags.username}>: ${msg}`);\n\n              this.emits(\n                ['chat', 'message'],\n                [\n                  [channel, message.tags, msg, false],\n                  [channel, message.tags, msg, false],\n                ],\n              );\n            }\n          }\n          break;\n\n        default:\n          this.log.warn(\n            `Could not parse message:\\n${JSON.stringify(message, null, 4)}`,\n          );\n          break;\n      }\n    }\n  }\n};\n\n// Connect to server..\nclient.prototype.connect = function connect() {\n  return new Promise((resolve, reject) => {\n    this.server = _.get(this.opts.connection.server, 'irc-ws.chat.twitch.tv');\n    this.port = _.get(this.opts.connection.port, 80);\n\n    // Override port if using a secure connection..\n    if (this.secure) {\n      this.port = 443;\n    }\n    if (this.port === 443) {\n      this.secure = true;\n    }\n\n    this.reconnectTimer = this.reconnectTimer * this.reconnectDecay;\n    if (this.reconnectTimer >= this.maxReconnectInterval) {\n      this.reconnectTimer = this.maxReconnectInterval;\n    }\n\n    // Connect to server from configuration..\n    this._openConnection();\n    this.once('_promiseConnect', err => {\n      if (!err) {\n        resolve([this.server, ~~this.port]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\n\n// Open a connection..\nclient.prototype._openConnection = function _openConnection() {\n  this.ws = new ws(\n    `${this.secure ? 'wss' : 'ws'}://${this.server}:${this.port}/`,\n    'irc',\n  );\n\n  this.ws.onmessage = this._onMessage.bind(this);\n  this.ws.onerror = this._onError.bind(this);\n  this.ws.onclose = this._onClose.bind(this);\n  this.ws.onopen = this._onOpen.bind(this);\n};\n\n// Called when the WebSocket connection's readyState changes to OPEN.\n// Indicates that the connection is ready to send and receive data..\nclient.prototype._onOpen = function _onOpen() {\n  if (!_.isNull(this.ws) && this.ws.readyState === 1) {\n    // Emitting \"connecting\" event..\n    this.log.info(`Connecting to ${this.server} on port ${this.port}..`);\n    this.emit('connecting', this.server, ~~this.port);\n\n    this.username = _.get(this.opts.identity.username, _.justinfan());\n    this.password = _.password(\n      _.get(this.opts.identity.password, 'SCHMOOPIIE'),\n    );\n\n    // Emitting \"logon\" event..\n    this.log.info('Sending authentication to server..');\n    this.emit('logon');\n\n    // Authentication..\n    this.ws.send(\n      'CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership',\n    );\n    this.ws.send(`PASS ${this.password}`);\n    this.ws.send(`NICK ${this.username}`);\n    this.ws.send(`USER ${this.username} 8 * :${this.username}`);\n  }\n};\n\n// Called when a message is received from the server..\nclient.prototype._onMessage = function _onMessage(event) {\n  const parts = event.data.split('\\r\\n');\n\n  parts.forEach(str => {\n    if (!_.isNull(str)) {\n      this.handleMessage(parse.msg(str));\n    }\n  });\n};\n\n// Called when an error occurs..\nclient.prototype._onError = function _onError() {\n  this.moderators = {};\n  this.userstate = {};\n  this.globaluserstate = {};\n\n  // Stop the internal ping timeout check interval..\n  clearInterval(this.pingLoop);\n  clearTimeout(this.pingTimeout);\n\n  this.reason = !_.isNull(this.ws)\n    ? 'Unable to connect.'\n    : 'Connection closed.';\n\n  this.emits(\n    ['_promiseConnect', 'disconnected'],\n    [[this.reason], [this.reason]],\n  );\n\n  // Reconnect to server..\n  if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {\n    this.emit('maxreconnect');\n    this.log.error('Maximum reconnection attempts reached.');\n  }\n  if (\n    this.reconnect &&\n    !this.reconnecting &&\n    this.reconnections <= this.maxReconnectAttempts - 1\n  ) {\n    this.reconnecting = true;\n    this.reconnections = this.reconnections + 1;\n    this.log.error(\n      `Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`,\n    );\n    this.emit('reconnect');\n    setTimeout(() => {\n      this.reconnecting = false;\n      this.connect();\n    }, this.reconnectTimer);\n  }\n\n  this.ws = null;\n};\n\n// Called when the WebSocket connection's readyState changes to CLOSED..\nclient.prototype._onClose = function _onClose() {\n  this.moderators = {};\n  this.userstate = {};\n  this.globaluserstate = {};\n\n  // Stop the internal ping timeout check interval..\n  clearInterval(this.pingLoop);\n  clearTimeout(this.pingTimeout);\n\n  // User called .disconnect(), don't try to reconnect.\n  if (this.wasCloseCalled) {\n    this.wasCloseCalled = false;\n    this.reason = 'Connection closed.';\n    this.log.info(this.reason);\n    this.emits(\n      ['_promiseConnect', '_promiseDisconnect', 'disconnected'],\n      [[this.reason], [null], [this.reason]],\n    );\n  } else {\n    // Got disconnected from server..\n    this.emits(\n      ['_promiseConnect', 'disconnected'],\n      [[this.reason], [this.reason]],\n    );\n\n    // Reconnect to server..\n    if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {\n      this.emit('maxreconnect');\n      this.log.error('Maximum reconnection attempts reached.');\n    }\n    if (\n      this.reconnect &&\n      !this.reconnecting &&\n      this.reconnections <= this.maxReconnectAttempts - 1\n    ) {\n      this.reconnecting = true;\n      this.reconnections = this.reconnections + 1;\n      this.log.error(\n        `Could not connect to server. Reconnecting in ${Math.round(\n          this.reconnectTimer / 1000,\n        )} seconds..`,\n      );\n      this.emit('reconnect');\n      setTimeout(() => {\n        this.reconnecting = false;\n        this.connect();\n      }, this.reconnectTimer);\n    }\n  }\n\n  this.ws = null;\n};\n\n// Promise delay for commands will fluctuate with the current server latency to\n// make sure it doesn't time out prematurely\nclient.prototype._getPromiseDelay = function _getPromiseDelay() {\n  return this.currentLatency + _.get(this.opts.options.commandTimeout, 600);\n};\n\n// Send command to server or channel..\nclient.prototype._sendCommand = function _sendCommand(\n  delay,\n  channel,\n  command,\n  fn,\n) {\n  // Race promise against delay..\n  return new Promise((resolve, reject) => {\n    _.promiseDelay(delay).then(() => {\n      reject('No response from Twitch.');\n    });\n\n    // Make sure the socket is opened..\n    if (\n      !_.isNull(this.ws) &&\n      this.ws.readyState !== 2 &&\n      this.ws.readyState !== 3\n    ) {\n      // Executing a command on a channel..\n      if (!_.isNull(channel)) {\n        this.log.info(`[${_.channel(channel)}] Executing command: ${command}`);\n        this.ws.send(`PRIVMSG ${_.channel(channel)} :${command}`);\n      } else {\n        // Executing a raw command..\n        this.log.info(`Executing command: ${command}`);\n        this.ws.send(command);\n      }\n      fn(resolve, reject);\n    } else {\n      // Disconnected from server..\n      reject('Not connected to server.');\n    }\n  });\n};\n\n// Send a message to channel..\nclient.prototype._sendMessage = function _sendMessage(\n  delay,\n  channel,\n  message,\n  fn,\n) {\n  // Promise a result..\n  return new Promise((resolve, reject) => {\n    // Make sure the socket is opened and not logged in as a justinfan user..\n    if (\n      !_.isNull(this.ws) &&\n      this.ws.readyState !== 2 &&\n      this.ws.readyState !== 3 &&\n      !_.isJustinfan(this.getUsername())\n    ) {\n      if (!this.userstate[_.channel(channel)]) {\n        this.userstate[_.channel(channel)] = {};\n      }\n\n      // Split long lines otherwise they will be eaten by the server..\n      if (message.length >= 500) {\n        const msg = _.splitLine(message, 500);\n        message = msg[0];\n\n        setTimeout(() => {\n          this._sendMessage(delay, channel, msg[1], () => {});\n        }, 350);\n      }\n\n      this.ws.send(`PRIVMSG ${_.channel(channel)} :${message}`);\n\n      const emotes = {};\n\n      // Parse regex and string emotes..\n      Object.keys(this.emotesets).forEach(id => {\n        this.emotesets[id].forEach(emote => {\n          if (_.isRegex(emote.code)) {\n            return parse.emoteRegex(message, emote.code, emote.id, emotes);\n          }\n          parse.emoteString(message, emote.code, emote.id, emotes);\n        });\n      });\n\n      // Merge userstate with parsed emotes..\n      const userstate = _.merge(\n        this.userstate[_.channel(channel)],\n        parse.emotes({ emotes: parse.transformEmotes(emotes) || null }),\n      );\n\n      // Message is an action (/me <message>)..\n      if (message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)) {\n        userstate['message-type'] = 'action';\n        this.log.info(\n          `[${_.channel(channel)}] *<${this.getUsername()}>: ${\n            message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1]\n          }`,\n        );\n        this.emits(\n          ['action', 'message'],\n          [\n            [\n              _.channel(channel),\n              userstate,\n              message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1],\n              true,\n            ],\n            [\n              _.channel(channel),\n              userstate,\n              message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1],\n              true,\n            ],\n          ],\n        );\n      } else {\n        // Message is a regular chat message..\n        userstate['message-type'] = 'chat';\n        this.log.info(\n          `[${_.channel(channel)}] <${this.getUsername()}>: ${message}`,\n        );\n        this.emits(\n          ['chat', 'message'],\n          [\n            [_.channel(channel), userstate, message, true],\n            [_.channel(channel), userstate, message, true],\n          ],\n        );\n      }\n      fn(resolve, reject);\n    } else {\n      reject('Not connected to server.');\n    }\n  });\n};\n\n// Grab the emote-sets object from the API..\nclient.prototype._updateEmoteset = function _updateEmoteset(sets) {\n  this.emotes = sets;\n\n  this.api(\n    {\n      url: `/chat/emoticon_images?emotesets=${sets}`,\n      headers: {\n        Authorization: `OAuth ${_.password(\n          _.get(this.opts.identity.password, ''),\n        ).replace('oauth:', '')}`,\n        'Client-ID': this.clientId,\n      },\n    },\n    (err, res, body) => {\n      if (!err) {\n        this.emotesets = body.emoticon_sets || {};\n        return this.emit('emotesets', sets, this.emotesets);\n      }\n      setTimeout(() => {\n        this._updateEmoteset(sets);\n      }, 60000);\n    },\n  );\n};\n\n// Get current username..\nclient.prototype.getUsername = function getUsername() {\n  return this.username;\n};\n\n// Get current options..\nclient.prototype.getOptions = function getOptions() {\n  return this.opts;\n};\n\n// Get current channels..\nclient.prototype.getChannels = function getChannels() {\n  return this.channels;\n};\n\n// Check if username is a moderator on a channel..\nclient.prototype.isMod = function isMod(channel, username) {\n  if (!this.moderators[_.channel(channel)]) {\n    this.moderators[_.channel(channel)] = [];\n  }\n  if (this.moderators[_.channel(channel)].indexOf(_.username(username)) >= 0) {\n    return true;\n  }\n  return false;\n};\n\n// Get readyState..\nclient.prototype.readyState = function readyState() {\n  if (_.isNull(this.ws)) {\n    return 'CLOSED';\n  }\n  return ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][this.ws.readyState];\n};\n\n// Disconnect from server..\nclient.prototype.disconnect = function disconnect() {\n  return new Promise((resolve, reject) => {\n    if (!_.isNull(this.ws) && this.ws.readyState !== 3) {\n      this.wasCloseCalled = true;\n      this.log.info('Disconnecting from server..');\n      this.ws.close();\n      this.once('_promiseDisconnect', () => {\n        resolve([this.server, ~~this.port]);\n      });\n    } else {\n      this.log.error(\n        'Cannot disconnect from server. Socket is not opened or connection is already closing.',\n      );\n      reject(\n        'Cannot disconnect from server. Socket is not opened or connection is already closing.',\n      );\n    }\n  });\n};\n\nclient.prototype.utils = {\n  levenshtein: function levenshtein(s1, s2, caseSensitive) {\n    const cost_ins = 1;\n    const cost_rep = 1;\n    const cost_del = 1;\n    caseSensitive = _.get(caseSensitive, false);\n\n    if (!caseSensitive) {\n      s1 = s1.toLowerCase();\n      s2 = s2.toLowerCase();\n    }\n\n    if (s1 === s2) {\n      return 0;\n    }\n\n    const l1 = s1.length;\n    const l2 = s2.length;\n\n    if (l1 === 0) {\n      return l2 * cost_ins;\n    }\n    if (l2 === 0) {\n      return l1 * cost_del;\n    }\n\n    let split = false;\n    try {\n      split = !'0'[0];\n    } catch (e) {\n      split = true;\n    }\n    if (split) {\n      s1 = s1.split('');\n      s2 = s2.split('');\n    }\n\n    let p1 = new Array(l2 + 1);\n    let p2 = new Array(l2 + 1);\n\n    let i1;\n    let i2;\n    let c0;\n    let c1;\n    let c2;\n    let tmp;\n\n    for (i2 = 0; i2 <= l2; i2++) {\n      p1[i2] = i2 * cost_ins;\n    }\n\n    for (i1 = 0; i1 < l1; i1++) {\n      p2[0] = p1[0] + cost_del;\n\n      for (i2 = 0; i2 < l2; i2++) {\n        c0 = p1[i2] + (s1[i1] === s2[i2] ? 0 : cost_rep);\n        c1 = p1[i2 + 1] + cost_del;\n\n        if (c1 < c0) {\n          c0 = c1;\n        }\n\n        c2 = p2[i2] + cost_ins;\n\n        if (c2 < c0) {\n          c0 = c2;\n        }\n\n        p2[i2 + 1] = c0;\n      }\n\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n    }\n\n    c0 = p1[l2];\n\n    return c0;\n  },\n  raffle: {\n    init: function init(channel) {\n      if (!this.raffleChannels) {\n        this.raffleChannels = {};\n      }\n      if (!this.raffleChannels[_.channel(channel)]) {\n        this.raffleChannels[_.channel(channel)] = [];\n      }\n    },\n    enter: function enter(channel, username) {\n      this.init(channel);\n      this.raffleChannels[_.channel(channel)].push(username.toLowerCase());\n    },\n    leave: function leave(channel, username) {\n      this.init(channel);\n      const index = this.raffleChannels[_.channel(channel)].indexOf(\n        _.username(username),\n      );\n      if (index >= 0) {\n        this.raffleChannels[_.channel(channel)].splice(index, 1);\n        return true;\n      }\n      return false;\n    },\n    pick: function pick(channel) {\n      this.init(channel);\n      const count = this.raffleChannels[_.channel(channel)].length;\n      if (count >= 1) {\n        return this.raffleChannels[_.channel(channel)][\n          Math.floor(Math.random() * count)\n        ];\n      }\n      return null;\n    },\n    reset: function reset(channel) {\n      this.init(channel);\n      this.raffleChannels[_.channel(channel)] = [];\n    },\n    count: function count(channel) {\n      this.init(channel);\n      if (this.raffleChannels[_.channel(channel)]) {\n        return this.raffleChannels[_.channel(channel)].length;\n      }\n      return 0;\n    },\n    isParticipating: function isParticipating(channel, username) {\n      this.init(channel);\n      if (\n        this.raffleChannels[_.channel(channel)].indexOf(_.username(username)) >=\n        0\n      ) {\n        return true;\n      }\n      return false;\n    },\n  },\n  symbols: function symbols(line) {\n    let count = 0;\n    for (let i = 0; i < line.length; i++) {\n      const charCode = line.substring(i, i + 1).charCodeAt(0);\n      if (charCode <= 30 || charCode >= 127 || charCode === 65533) {\n        count++;\n      }\n    }\n    return Math.ceil(count / line.length * 100) / 100;\n  },\n  uppercase: function uppercase(line) {\n    const chars = line.length;\n    const u_let = line.match(/[A-Z]/g);\n    if (!_.isNull(u_let)) {\n      return u_let.length / chars;\n    }\n    return 0;\n  },\n};\n\n// Expose everything, for browser and Node..\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = client;\n}\nif (typeof window !== 'undefined') {\n  window.tmi = {};\n  window.tmi.client = client;\n}\n"]}