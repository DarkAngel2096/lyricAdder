{"version":3,"sources":["../src/commands.js"],"names":["_","require","followersonly","channel","minutes","get","_sendCommand","_getPromiseDelay","resolve","reject","once","err","followersonlyoff","part","r9kbeta","r9kbetaoff","slow","seconds","slowoff","module","exports","action","message","_sendMessage","ban","username","reason","clear","color","newColor","commercial","emoteonly","emoteonlyoff","followersmode","followersmodeoff","host","target","remaining","join","mod","mods","forEach","moderators","indexOf","push","leave","ping","latency","Date","pingTimeout","setTimeout","ws","wasCloseCalled","log","error","close","clearInterval","pingLoop","clearTimeout","opts","connection","timeout","parseFloat","r9kmode","r9kmodeoff","raw","say","startsWith","substr","slowmode","slowmodeoff","subscribers","subscribersoff","isNull","isInteger","unban","unhost","unmod","whisper","getUsername","Promise","from","userstate","merge","globaluserstate","emits"],"mappings":"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","file":"commands.js","sourcesContent":["const _ = require('./utils');\n\n// Enable followers-only mode on a channel..\nfunction followersonly(channel, minutes) {\n  channel = _.channel(channel);\n  minutes = _.get(minutes, 30);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    channel,\n    `/followers ${minutes}`,\n    (resolve, reject) => {\n      // Received _promiseFollowers event, resolve or reject..\n      this.once('_promiseFollowers', err => {\n        if (!err) {\n          resolve([channel, ~~minutes]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\n// Disable followers-only mode on a channel..\nfunction followersonlyoff(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    channel,\n    '/followersoff',\n    (resolve, reject) => {\n      // Received _promiseFollowersoff event, resolve or reject..\n      this.once('_promiseFollowersoff', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\n// Leave a channel..\nfunction part(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    null,\n    `PART ${channel}`,\n    (resolve, reject) => {\n      // Received _promisePart event, resolve or reject..\n      this.once('_promisePart', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\n// Enable R9KBeta mode on a channel..\nfunction r9kbeta(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    channel,\n    '/r9kbeta',\n    (resolve, reject) => {\n      // Received _promiseR9kbeta event, resolve or reject..\n      this.once('_promiseR9kbeta', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\n// Disable R9KBeta mode on a channel..\nfunction r9kbetaoff(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    channel,\n    '/r9kbetaoff',\n    (resolve, reject) => {\n      // Received _promiseR9kbetaoff event, resolve or reject..\n      this.once('_promiseR9kbetaoff', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\n// Enable slow mode on a channel..\nfunction slow(channel, seconds) {\n  channel = _.channel(channel);\n  seconds = _.get(seconds, 300);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    channel,\n    `/slow ${seconds}`,\n    (resolve, reject) => {\n      // Received _promiseSlow event, resolve or reject..\n      this.once('_promiseSlow', err => {\n        if (!err) {\n          resolve([channel, ~~seconds]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\n// Disable slow mode on a channel..\nfunction slowoff(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(\n    this._getPromiseDelay(),\n    channel,\n    '/slowoff',\n    (resolve, reject) => {\n      // Received _promiseSlowoff event, resolve or reject..\n      this.once('_promiseSlowoff', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    },\n  );\n}\n\nmodule.exports = {\n  // Send action message (/me <message>) on a channel..\n  action: function action(channel, message) {\n    channel = _.channel(channel);\n    message = `\\u0001ACTION ${message}\\u0001`;\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendMessage(\n      this._getPromiseDelay(),\n      channel,\n      message,\n      resolve => {\n        // At this time, there is no possible way to detect\n        // if a message has been sent has been eaten\n        // by the server, so we can only resolve the Promise.\n        resolve([channel, message]);\n      },\n    );\n  },\n\n  // Ban username on channel..\n  ban: function ban(channel, username, reason) {\n    channel = _.channel(channel);\n    username = _.username(username);\n    reason = _.get(reason, '');\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      `/ban ${username} ${reason}`,\n      (resolve, reject) => {\n        // Received _promiseBan event, resolve or reject..\n        this.once('_promiseBan', err => {\n          if (!err) {\n            resolve([channel, username, reason]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Clear all messages on a channel..\n  clear: function clear(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      '/clear',\n      (resolve, reject) => {\n        // Received _promiseClear event, resolve or reject..\n        this.once('_promiseClear', err => {\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Change the color of your username..\n  color: function color(channel, newColor) {\n    newColor = _.get(newColor, channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      '#tmijs',\n      `/color ${newColor}`,\n      (resolve, reject) => {\n        // Received _promiseColor event, resolve or reject..\n        this.once('_promiseColor', err => {\n          if (!err) {\n            resolve([newColor]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Run commercial on a channel for X seconds..\n  commercial: function commercial(channel, seconds) {\n    channel = _.channel(channel);\n    seconds = _.get(seconds, 30);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      `/commercial ${seconds}`,\n      (resolve, reject) => {\n        // Received _promiseCommercial event, resolve or reject..\n        this.once('_promiseCommercial', err => {\n          if (!err) {\n            resolve([channel, ~~seconds]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Enable emote-only mode on a channel..\n  emoteonly: function emoteonly(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      '/emoteonly',\n      (resolve, reject) => {\n        // Received _promiseEmoteonly event, resolve or reject..\n        this.once('_promiseEmoteonly', err => {\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Disable emote-only mode on a channel..\n  emoteonlyoff: function emoteonlyoff(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      '/emoteonlyoff',\n      (resolve, reject) => {\n        // Received _promiseEmoteonlyoff event, resolve or reject..\n        this.once('_promiseEmoteonlyoff', err => {\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Enable followers-only mode on a channel..\n  followersonly,\n\n  // Alias for followersonly()..\n  followersmode: followersonly,\n\n  // Disable followers-only mode on a channel..\n  followersonlyoff,\n\n  // Alias for followersonlyoff()..\n  followersmodeoff: followersonlyoff,\n\n  // Host a channel..\n  host: function host(channel, target) {\n    channel = _.channel(channel);\n    target = _.username(target);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      2000,\n      channel,\n      `/host ${target}`,\n      (resolve, reject) => {\n        // Received _promiseHost event, resolve or reject..\n        this.once('_promiseHost', (err, remaining) => {\n          if (!err) {\n            resolve([channel, target, ~~remaining]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Join a channel..\n  join: function join(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      null,\n      `JOIN ${channel}`,\n      (resolve, reject) => {\n        // Received _promiseJoin event, resolve or reject..\n        this.once('_promiseJoin', err => {\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Mod username on channel..\n  mod: function mod(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      `/mod ${username}`,\n      (resolve, reject) => {\n        // Received _promiseMod event, resolve or reject..\n        this.once('_promiseMod', err => {\n          if (!err) {\n            resolve([channel, username]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Get list of mods on a channel..\n  mods(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      '/mods',\n      (resolve, reject) => {\n        // Received _promiseMods event, resolve or reject..\n        this.once('_promiseMods', (err, mods) => {\n          if (!err) {\n            // Update the internal list of moderators..\n            mods.forEach(username => {\n              if (!this.moderators[channel]) {\n                this.moderators[channel] = [];\n              }\n              if (this.moderators[channel].indexOf(username) < 0) {\n                this.moderators[channel].push(username);\n              }\n            });\n            resolve(mods);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Leave a channel..\n  part,\n\n  // Alias for part()..\n  leave: part,\n\n  // Send a ping to the server..\n  ping: function ping() {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), null, 'PING', resolve => {\n      // Update the internal ping timeout check interval..\n      this.latency = new Date();\n      this.pingTimeout = setTimeout(() => {\n        if (this.ws !== null) {\n          this.wasCloseCalled = false;\n          this.log.error('Ping timeout.');\n          this.ws.close();\n\n          clearInterval(this.pingLoop);\n          clearTimeout(this.pingTimeout);\n        }\n      }, _.get(this.opts.connection.timeout, 9999));\n\n      // Received _promisePing event, resolve or reject..\n      this.once('_promisePing', latency => {\n        resolve([parseFloat(latency)]);\n      });\n    });\n  },\n\n  // Enable R9KBeta mode on a channel..\n  r9kbeta,\n\n  // Alias for r9kbeta()..\n  r9kmode: r9kbeta,\n\n  // Disable R9KBeta mode on a channel..\n  r9kbetaoff,\n\n  // Alias for r9kbetaoff()..\n  r9kmodeoff: r9kbetaoff,\n\n  // Send a raw message to the server..\n  raw: function raw(message) {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      null,\n      message,\n      resolve => {\n        resolve([message]);\n      },\n    );\n  },\n\n  // Send a message on a channel..\n  say: function say(channel, message) {\n    channel = _.channel(channel);\n\n    if (\n      (message.startsWith('.') && !message.startsWith('..')) ||\n      message.startsWith('/') ||\n      message.startsWith('\\\\')\n    ) {\n      // Check if the message is an action message..\n      if (message.substr(1, 3) === 'me ') {\n        return this.action(channel, message.substr(4));\n      }\n\n      // Send the command to the server and race the Promise against a delay..\n      return this._sendCommand(\n        this._getPromiseDelay(),\n        channel,\n        message,\n        resolve => {\n          // At this time, there is no possible way to detect if a message has\n          // been sent has been eaten by the server, so we can only resolve the\n          // Promise.\n          resolve([channel, message]);\n        },\n      );\n    }\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendMessage(\n      this._getPromiseDelay(),\n      channel,\n      message,\n      resolve => {\n        // At this time, there is no possible way to detect\n        // if a message has been sent has been eaten\n        // by the server, so we can only resolve the Promise.\n        resolve([channel, message]);\n      },\n    );\n  },\n\n  // Enable slow mode on a channel..\n  slow,\n\n  // Alias for slow()..\n  slowmode: slow,\n\n  // Disable slow mode on a channel..\n  slowoff,\n\n  // Alias for slowoff()..\n  slowmodeoff: slowoff,\n\n  // Enable subscribers mode on a channel..\n  subscribers: function subscribers(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      '/subscribers',\n      (resolve, reject) => {\n        // Received _promiseSubscribers event, resolve or reject..\n        this.once('_promiseSubscribers', err => {\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Disable subscribers mode on a channel..\n  subscribersoff: function subscribersoff(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      '/subscribersoff',\n      (resolve, reject) => {\n        // Received _promiseSubscribersoff event, resolve or reject..\n        this.once('_promiseSubscribersoff', err => {\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Timeout username on channel for X seconds..\n  timeout: function timeout(channel, username, seconds, reason) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    if (!_.isNull(seconds) && !_.isInteger(seconds)) {\n      reason = seconds;\n      seconds = 300;\n    }\n\n    seconds = _.get(seconds, 300);\n    reason = _.get(reason, '');\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      `/timeout ${username} ${seconds} ${reason}`,\n      (resolve, reject) => {\n        // Received _promiseTimeout event, resolve or reject..\n        this.once('_promiseTimeout', err => {\n          if (!err) {\n            resolve([channel, username, ~~seconds, reason]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Unban username on channel..\n  unban: function unban(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      `/unban ${username}`,\n      (resolve, reject) => {\n        // Received _promiseUnban event, resolve or reject..\n        this.once('_promiseUnban', err => {\n          if (!err) {\n            resolve([channel, username]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // End the current hosting..\n  unhost: function unhost(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(2000, channel, '/unhost', (resolve, reject) => {\n      // Received _promiseUnhost event, resolve or reject..\n      this.once('_promiseUnhost', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Unmod username on channel..\n  unmod: function unmod(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      channel,\n      `/unmod ${username}`,\n      (resolve, reject) => {\n        // Received _promiseUnmod event, resolve or reject..\n        this.once('_promiseUnmod', err => {\n          if (!err) {\n            resolve([channel, username]);\n          } else {\n            reject(err);\n          }\n        });\n      },\n    );\n  },\n\n  // Send an whisper message to a user..\n  whisper: function whisper(username, message) {\n    username = _.username(username);\n\n    // The server will not send a whisper to the account that sent it.\n    if (username === this.getUsername()) {\n      return Promise.reject('Cannot send a whisper to the same account.');\n    }\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(\n      this._getPromiseDelay(),\n      '#tmijs',\n      `/w ${username} ${message}`,\n      resolve => {\n        const from = _.channel(username);\n        const userstate = _.merge(\n          {\n            'message-type': 'whisper',\n            'message-id': null,\n            'thread-id': null,\n            username: this.getUsername(),\n          },\n          this.globaluserstate,\n        );\n\n        // Emit for both, whisper and message..\n        this.emits(\n          ['whisper', 'message'],\n          [[from, userstate, message, true], [from, userstate, message, true]],\n        );\n\n        // At this time, there is no possible way to detect\n        // if a message has been sent has been eaten\n        // by the server, so we can only resolve the Promise.\n        resolve([username, message]);\n      },\n    );\n  },\n};\n"]}